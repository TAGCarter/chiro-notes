<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Chiropractic Listing Template - v2.7</title>
    <style>
        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            margin: 20px;
            background-color: #f4f7fa;
            color: #333;
        }
        .top-buttons {
            margin-bottom: 20px;
            display: flex;
            gap: 10px;
        }
        .button {
            padding: 8px 16px;
            background-color: #4a90e2;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s ease;
        }
        .button:hover {
            background-color: #357abd;
        }
        .button.selected {
            background-color: #b3e6b3 !important;
        }
        .column-container {
            display: flex;
            gap: 20px;
        }
        .col {
            border: 1px solid #d1d9e6;
            padding: 15px;
            border-radius: 8px;
            box-sizing: border-box;
            background-color: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .col-objective {
            flex: 1 1 20%;
            max-height: none;
            overflow-y: visible;
        }
        .col-bones, .col-listings {
            flex: 1 1 25%;
        }
        .col-soap {
            flex: 1 1 30%;
        }
        .selectable {
            cursor: pointer;
            background: #e8f0fe;
            padding: 8px;
            margin: 8px 0;
            border: 1px solid #b3c7f7;
            border-radius: 4px;
            transition: background-color 0.2s ease, border-color 0.2s ease;
            position: relative;
        }
        .selectable:hover:not(.selected) {
            background: #b3d4ff;
        }
        .selectable[data-tooltip]:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            background: #2c5282;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            z-index: 10;
            top: -30px;
            left: 50%;
            transform: translateX(-50%);
            white-space: nowrap;
        }
        .col-bones .selectable {
            outline: none;
            border-color: inherit;
        }
        .col-listings .selectable {
            outline: none;
            border-color: #4a90e2;
        }
        .selected {
            background: #b3e6b3 !important;
            border-color: #4caf50 !important;
        }
        .group {
            margin-bottom: 15px;
        }
        h1 {
            color: #2c5282;
            font-size: 24px;
            margin-bottom: 20px;
        }
        h3 {
            color: #2c5282;
            font-size: 18px;
            margin-bottom: 10px;
            text-align: center;
        }
        h4 {
            color: #4a5568;
            font-size: 16px;
            margin-bottom: 8px;
            text-align: left;
        }
        textarea {
            width: 100%;
            height: 120px;
            margin-bottom: 10px;
            box-sizing: border-box;
            resize: vertical;
            border: 1px solid #d1d9e6;
            border-radius: 4px;
            padding: 8px;
            font-size: 14px;
        }
        .soap-header {
            cursor: pointer;
            color: #2c5282;
            font-weight: bold;
        }
        .active-section {
            border: 2px solid #4caf50;
            padding: 5px;
            border-radius: 4px;
        }
        #status {
            font-style: italic;
            color: #718096;
            font-size: 14px;
        }
        .reflex-row {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
            gap: 5px;
        }
        .reflex-row button {
            padding: 4px 8px;
            font-size: 12px;
        }
        input[type="text"] {
            width: 80%;
            margin-bottom: 8px;
            box-sizing: border-box;
            border: 1px solid #d1d9e6;
            border-radius: 4px;
            padding: 6px;
            font-size: 14px;
        }
        .search-input {
            width: 100%;
            margin-bottom: 10px;
            padding: 6px;
            border: 1px solid #d1d9e6;
            border-radius: 4px;
        }
        .section {
            margin-bottom: 20px;
        }
        details {
            margin-bottom: 20px;
        }
        summary {
            cursor: pointer;
            font-weight: bold;
            color: #2c5282;
            list-style: none;
            padding: 8px;
            background-color: #c7eaff;
            border: 1px solid #b3c7f7;
            border-radius: 4px;
            transition: background-color 0.2s ease;
        }
        summary:hover {
            background-color: #a8d1ff;
        }
        .text-input-group {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        .text-input-group input {
            flex: 1;
        }
        .number-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
        }
        .number-buttons button {
            padding: 4px 8px;
            font-size: 12px;
        }
        .listings-section, .positions-section, .contacts-section, .types-section, .protocols-section {
            margin-bottom: 10px;
        }
        .sacrum-content, .coccyx-content {
            padding: 10px;
        }
        .section-header {
            cursor: pointer;
            font-weight: bold;
            color: #2c5282;
            padding: 12px;
            background-color: #c7eaff;
            border: 1px solid #b3c7f7;
            border-radius: 8px;
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
            margin-bottom: 15px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .section-header:hover {
            background-color: #a8d1ff;
            box-shadow: 0 3px 6px rgba(0,0,0,0.15);
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            background-color: rgba(0,0,0,0.4);
            transition: opacity 0.3s ease;
        }
        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 90vw;
            max-height: 90vh;
            overflow-y: auto;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        .attractive-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0 8px;
        }
        .attractive-table th, .attractive-table td {
            padding: 8px 12px;
            text-align: left;
            vertical-align: middle;
        }
        .attractive-table th {
            background-color: #81d4fa;
            color: #01579b;
            border-top-left-radius: 6px;
            border-bottom-left-radius: 6px;
            font-size: 14px;
            width: 35%;
        }
        .attractive-table td {
            background-color: #e1f5fe;
            border-top-right-radius: 6px;
            border-bottom-right-radius: 6px;
        }
        .attractive-table .button-group {
            display: flex;
            gap: 5px;
        }
        .neuro-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        .neuro-table th, .neuro-table td {
            padding: 8px;
            text-align: center;
            border: 1px solid #d1d9e6;
        }
        .neuro-table th {
            background-color: #2c5282;
            color: white;
        }
        .number-selector-table {
            width: 100%;
            margin-bottom: 20px;
        }
        .number-selector-table caption {
            font-weight: bold;
            margin-bottom: 10px;
            color: #2c5282;
        }
        .number-selector-table td {
            padding: 5px;
        }
        .vip-section {
            margin-bottom: 20px;
        }
        .sub-modal {
            display: none;
            position: fixed;
            z-index: 2000;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            background-color: #fefefe;
            padding: 20px;
            border: 1px solid #888;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            animation: scaleIn 0.3s ease-out;
        }
        @keyframes scaleIn {
            from {
                transform: translate(-50%, -50%) scale(0);
            }
            to {
                transform: translate(-50%, -50%) scale(1);
            }
        }
        .sub-modal-content {
            max-height: 70vh;
            overflow-y: auto;
        }
        .fault-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 7px; /* Reduced to shrink by 50% */
        }
        .fault-button {
            padding: 10px; /* Reduced to shrink by 50% */
            background-color: #e3f2fd;
            color: #2c5282;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            text-align: center;
            transition: background-color 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px; /* Reduced font size */
        }
        .fault-button:hover {
            background-color: #bbdefb;
        }
        .fault-button:active {
            background: radial-gradient(circle at center, #4a90e2 0%, #b3d4ff 100%);
        }
        .selection-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(50px, 1fr));
            gap: 5px;
        }
        .selection-button {
            padding: 8px;
            background-color: #e8f0fe;
            border: 1px solid #b3c7f7;
            border-radius: 4px;
            cursor: pointer;
            text-align: center;
            transition: background-color 0.2s ease;
        }
        .selection-button.selected {
            background-color: #b3e6b3;
            border-color: #4caf50;
        }
        .selection-button:hover:not(.selected) {
            background-color: #b3d4ff;
        }
        .faded {
            opacity: 0.3;
            pointer-events: none;
        }
        .primary-question {
            text-align: center;
            margin-bottom: 10px;
            font-weight: bold;
            color: #2c5282;
        }
        .organ-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 5px;
            max-height: 50vh;
            overflow-y: auto;
        }
        .search-box {
            width: 100%;
            margin-bottom: 10px;
        }
        .custom-input {
            width: 100%;
            margin-top: 10px;
        }
        .add-to-soap {
            margin-top: 20px;
            width: 100%;
        }
        /* New styles for Gyro sub-modal */
        .gyro-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        .gyro-line-row {
            display: flex;
            justify-content: space-between;
            gap: 40px;
            align-items: flex-start;
        }
        .gyro-side {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .gyro-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            justify-content: flex-start; /* Align to left for better symmetry */
        }
    </style>
    <script>
        let selectedBone = '';
        let selectedCategory = '';
        let selectedListings = [];
        let selectedPositions = [];
        let selectedContacts = [];
        let selectedTypes = [];
        let selectedSot = [];
        let selectedProtocols = [];
        let activeTextarea = null;
        let history = [];
        let future = [];
        let openModals = [];

        const listingsData = {
            'Cranial Bones': {
                commonListings: [
                    { text: 'LEFT', tooltip: 'Left-sided adjustment' },
                    { text: 'RIGHT', tooltip: 'Right-sided adjustment' },
                    { text: 'Bilateral', tooltip: 'Both sides adjusted' },
                    { text: 'Flexion', tooltip: 'Forward tilt adjustment' },
                    { text: 'Extension', tooltip: 'Backward tilt adjustment' },
                    { text: 'Inferior', tooltip: 'Downward adjustment' },
                    { text: 'Superior', tooltip: 'Upward adjustment' }
                ],
                commonTypes: [
                    { text: 'Neuro-Interlink Reflex', tooltip: 'Reflex-based correction' },
                    { text: 'hold release', tooltip: 'Gentle hold and release technique for cranial sutures' },
                    { text: 'finger toggle', tooltip: 'A gentle hold with torque followed by a HVLA thrust' },
                    { text: 'CSF guided release', tooltip: 'Cerebrospinal fluid guided release technique' }
                ],
                commonProtocols: [
                    { text: 'Howat 8 step Protocol', tooltip: 'Cranial detorque correction' },
                    { text: 'Carter Nose correction protocol', tooltip: 'Nasal structure correction' },
                    { text: 'Carter Sphenoid correction', tooltip: 'Protocol for sphenoid bone correction' }
                ],
                'Occipital': {
                    positions: [
                        { text: 'Occipito-mastoid suture', tooltip: 'Contact at occipito-mastoid junction' },
                        { text: 'Lamboidal suture', tooltip: 'Contact at lamboidal suture' }
                    ]
                },
                'Sphenoid': {
                    positions: [
                        { text: 'Pterion', tooltip: 'Junction of frontal, parietal, temporal, and sphenoid' },
                        { text: 'Spheno-parietal Suture', tooltip: 'Sphenoid-parietal contact' },
                        { text: 'Spheno-frontal Suture', tooltip: 'Sphenoid-frontal contact' },
                        { text: 'Spheno-squamous Suture', tooltip: 'Sphenoid-temporal contact' },
                        { text: 'Spheno-zygomatic suture', tooltip: 'Sphenoid-zygomatic contact' }
                    ]
                },
                'Maxilla': {
                    positions: [
                        { text: 'Inter Maxillary Suture', tooltip: 'Between maxillary bones' },
                        { text: 'Median Palatine Suture', tooltip: 'Midline palatal contact' },
                        { text: 'Transverse Palatine suture', tooltip: 'Cross-palatal contact' },
                        { text: 'Incisive suture', tooltip: 'Anterior maxillary suture' },
                        { text: 'Zygomatico-maxillary suture', tooltip: 'Zygomatic-maxillary junction' },
                        { text: 'Lacrimo-maxillary suture', tooltip: 'Lacrimal-maxillary junction' },
                        { text: 'Fronto maxillary suture', tooltip: 'Frontal-maxillary junction' },
                        { text: 'Naso-maxillary suture', tooltip: 'Nasal-maxillary junction' }
                    ]
                },
                'Frontal': {
                    positions: [
                        { text: 'Sagittal Suture', tooltip: 'Midline cranial suture' },
                        { text: 'Frontal Suture', tooltip: 'Frontal bone midline' },
                        { text: 'Frontonasal suture', tooltip: 'Frontal-nasal junction' },
                        { text: 'Fronto maxillary suture', tooltip: 'Frontal-maxillary junction' },
                        { text: 'Fronto-lacrimal suture', tooltip: 'Frontal-lacrimal junction' },
                        { text: 'Fronto-zygomatic suture', tooltip: 'Frontal-zygomatic junction' },
                        { text: 'CCJ cranial detorque protocol', tooltip: 'Corrective proceedure thatfollwos an upper cervical correction' }
                    ]
                },
                'Parietal': {
                    positions: [
                        { text: 'Sagittal Suture', tooltip: 'Midline parietal contact' },
                        { text: 'Squamous Suture', tooltip: 'Parietal-temporal junction' },
                        { text: 'Spheno-parietal Suture', tooltip: 'Sphenoid-parietal contact' },
                        { text: 'Parietomas-toid Suture', tooltip: 'Parietal-mastoid contact' },
                        { text: 'Lamboidal suture', tooltip: 'Parietal-occipital junction' }
                    ]
                },
                'Temporal': {
                    positions: [
                        { text: 'Squamous Suture', tooltip: 'Temporal-parietal junction' },
                        { text: 'Temporo-zygomatic suture', tooltip: 'Temporal-zygomatic contact' },
                        { text: 'Spheno-squamous Suture', tooltip: 'Sphenoid-temporal contact' },
                        { text: 'Occipito-mastoid suture', tooltip: 'Occipital-temporal junction' },
                        { text: 'Parietomas-toid Suture', tooltip: 'Parietal-mastoid contact' },
                        { text: 'TMJ', tooltip: 'Temporomandibular joint (jaw) adjustment' }
                    ]
                },
                'Zygomatic': {
                    positions: [
                        { text: 'Temporo-zygomatic suture', tooltip: 'Temporal-zygomatic junction' },
                        { text: 'Spheno-zygomatic suture', tooltip: 'Sphenoid-zygomatic contact' },
                        { text: 'Zygomatico-maxillary suture', tooltip: 'Zygomatic-maxillary junction' },
                        { text: 'Fronto-zygomatic suture', tooltip: 'Frontal-zygomatic junction' }
                    ]
                },
                'Ethmoid': {
                    positions: [
                        { text: 'Internasal suture', tooltip: 'Nasal bone junction' },
                        { text: 'Nose protocol', tooltip: 'Nasal structure adjustment' },
                        { text: 'Nasal cartilage', tooltip: 'Cartilage correction' }
                    ]
                },
                'Vomer': {
                    positions: [
                        { text: 'Median Palatine Suture', tooltip: 'Midline palatal contact' },
                        { text: 'Gum release', tooltip: 'Soft tissue release of the gum of a tooth' }
                    ]
                },
                'Mandible': {
                    positions: [
                        { text: 'TMJ AI/PS', tooltip: 'Temporomandibular joint adjustment' },
                        { text: 'Mentalis Suture', tooltip: 'Chin area contact' },
                        { text: 'Gum release', tooltip: 'Soft tissue release of the gum of a tooth' }
                    ]
                }
            },
            'Cervical': {
                'Occiput': {
                    listings: [
                        { text: 'PS', tooltip: 'Posterior Superior' },
                        { text: 'PS-LS', tooltip: 'Posterior Superior, Left Subluxation' },
                        { text: 'PS-RS', tooltip: 'Posterior Superior, Right Subluxation' },
                        { text: 'AS', tooltip: 'Anterior Superior' },
                        { text: 'AS-LS', tooltip: 'Anterior Superior, Left Subluxation' },
                        { text: 'AS-RS', tooltip: 'Anterior Superior, Right Subluxation' },
                        { text: 'Left posterior Facet', tooltip: 'Left Facet Joint Subluxation' },
                        { text: 'Right posterior Facet', tooltip: 'Right Facet Joint Subluxation' },
                        { text: 'Bilateral posterior Facet', tooltip: 'Bilateral Facet Joint Subluxation' }
                    ],
                    positions: [
                        { text: 'Prone', tooltip: 'Face-down position' },
                        { text: 'Supine', tooltip: 'Face-up position' },
                        { text: 'Seated', tooltip: 'Sitting position' },
                        { text: 'Side posture', tooltip: 'Side-lying position' },
                        { text: 'Side Posture Toggle Recoil with drop', tooltip: 'Toggle recoil with drop table' }
                    ],
                    types: [
                        { text: 'Osseous', tooltip: 'Cavitation adjustment' },
                        { text: 'De-compression', tooltip: 'Decompression technique' },
                        { text: 'Toggle Recoil', tooltip: 'Toggle recoil method' },
                        { text: 'Finger toggle', tooltip: 'Finger-based toggle adjustment' },
                        { text: 'Drop', tooltip: 'Drop table technique' },
                        { text: 'Hold', tooltip: 'Sustained hold adjustment' },
                        { text: 'Dural Breath', tooltip: 'Dural tension adjustment' }
                    ]
                },
                'C1/Atlas': {
                    listings: [
                        { text: 'ASR', tooltip: 'Anterior Superior Right' },
                        { text: 'ASR-P', tooltip: 'Anterior Superior Right, Posterior' },
                        { text: 'ASR-A', tooltip: 'Anterior Superior Right, Anterior' },
                        { text: 'PIR', tooltip: 'Posterior Inferior Right' },
                        { text: 'PIR-P', tooltip: 'Posterior Inferior Right, Posterior' },
                        { text: 'PIR-A', tooltip: 'Posterior Inferior Right, Anterior' },
                        { text: 'ASL', tooltip: 'Anterior Superior Left' },
                        { text: 'ASL-P', tooltip: 'Anterior Superior Left, Posterior' },
                        { text: 'ASL-A', tooltip: 'Anterior Superior Left, Anterior' },
                        { text: 'PIL', tooltip: 'Posterior Inferior Left' },
                        { text: 'PIL-P', tooltip: 'Posterior Inferior Left, Posterior' },
                        { text: 'PIL-A', tooltip: 'Posterior Inferior Left, Anterior' },
                        { text: 'Left posterior Facet', tooltip: 'Left Posterior Facet Subluxation' },
                        { text: 'Right posterior Facet', tooltip: 'Right Posterior Facet Subluxation' },
                        { text: 'Bilateral posterior Facet', tooltip: 'Bilateral Posterior Facet Subluxation' },
                        { text: 'Left anterior Facet', tooltip: 'Left anterior Facet Subluxation' },
                        { text: 'Right anterior Facet', tooltip: 'Right anterior Facet Subluxation' },
                        { text: 'Bilateral anterior Facet', tooltip: 'Bilateral anterior Facet Subluxation' }
                    ],
                    positions: [
                        { text: 'Prone', tooltip: 'Face-down position' },
                        { text: 'Supine', tooltip: 'Face-up position' },
                        { text: 'Seated', tooltip: 'Sitting position' },
                        { text: 'Side posture', tooltip: 'Side-lying position' }
                    ],
                    contacts: [
                        { text: 'TVP contact', tooltip: 'Transverse Process contact' },
                        { text: 'Posteior arch contact', tooltip: 'Posteiror arch contact' }
                    ],
                    types: [
                        { text: 'Side Posture Toggle Recoil with drop', tooltip: 'Toggle recoil with drop table' },
                        { text: 'Osseous', tooltip: 'Cavitation adjustment' },
                        { text: 'Toggle Recoil', tooltip: 'Toggle recoil method' },
                        { text: 'Finger toggle', tooltip: 'Finger-based toggle adjustment' },
                        { text: 'Hold', tooltip: 'Sustained hold adjustment' },
                        { text: 'Drop', tooltip: 'Drop table technique' },
                        { text: 'Dural Breath', tooltip: 'Dural tension adjustment' },
                        { text: 'Coupled Motion', tooltip: 'Combined motion correction' },
                        { text: 'Lateral flexion', tooltip: 'Side bending adjustment' },
                        { text: 'Rotation', tooltip: 'Rotational correction' },
                        { text: 'De-compression', tooltip: 'Decompression technique' },
                        { text: 'Pull', tooltip: 'Pulling adjustment' },
                        { text: 'NUCCA', tooltip: 'National Upper Cervical Chiropractic Association technique' }
                    ]
                },
                'C2-7': {
                    listings: [
                        { text: 'Left posterior Facet', tooltip: 'Left Posterior Facet Subluxation' },
                        { text: 'Right posterior Facet', tooltip: 'Right Posterior Facet Subluxation' },
                        { text: 'Bilateral posterior Facet', tooltip: 'Bilateral Posterior Facet Subluxation' },
                        { text: 'ASR-la', tooltip: 'Anterior Superior Right' },
                        { text: 'ASL-la', tooltip: 'Anterior Superior Left' },
                        { text: 'PR', tooltip: 'Posterior Right' },
                        { text: 'PRS', tooltip: 'Posterior Right Superior' },
                        { text: 'PRI-la', tooltip: 'Posterior Right Inferior, Lateral' },
                        { text: 'PL', tooltip: 'Posterior Left' },
                        { text: 'PLS', tooltip: 'Posterior Left Superior' },
                        { text: 'PLI-la', tooltip: 'Posterior Left Inferior, Lateral' },
                        { text: 'A2N', tooltip: 'Axis to Neutral' },
                        { text: 'AL Disc', tooltip: 'Anterior Left Disc/Facet Subluxation' },
                        { text: 'AR Disc', tooltip: 'Anterior Right Disc/Facet Subluxation' },
                        { text: 'AL Facet', tooltip: 'Anterior Left Disc/Facet Subluxation' },
                        { text: 'AR Facet', tooltip: 'Anterior Right Disc/Facet Subluxation' }
                    ],
                    positions: [
                        { text: 'Prone', tooltip: 'Face-down position' },
                        { text: 'Supine', tooltip: 'Face-up position' },
                        { text: 'Seated', tooltip: 'Sitting position' },
                        { text: 'Side posture', tooltip: 'Side-lying position' }
                    ],
                    contacts: [
                        { text: 'TVP contact', tooltip: 'Transverse Process contact' },
                        { text: 'SP contact', tooltip: 'Spinous Process contact' },
                        { text: 'Lamina contact', tooltip: 'Lamina contact' },
                        { text: 'Articular pillar contact', tooltip: 'Articular Pillar contact' }
                    ],
                    types: [
                        { text: 'Osseous', tooltip: 'Cavitation adjustment' },
                        { text: 'Side Posture Toggle Recoil with drop', tooltip: 'Toggle recoil with drop table' },
                        { text: 'Drop', tooltip: 'Drop table technique' },
                        { text: 'Toggle Recoil', tooltip: 'Toggle recoil method' },
                        { text: 'Finger toggle', tooltip: 'Finger-based toggle adjustment' },
                        { text: 'Hold', tooltip: 'Sustained hold adjustment' },
                        { text: 'Dural Breath', tooltip: 'Dural tension adjustment' },
                        { text: 'Coupled Motion', tooltip: 'Combined motion correction' },
                        { text: 'Lateral flexion', tooltip: 'Side bending adjustment' },
                        { text: 'Rotation', tooltip: 'Rotational correction' },
                        { text: 'De-compression', tooltip: 'Decompression technique' },
                        { text: 'Pull', tooltip: 'Pulling adjustment' }
                    ]
                }
            },
            'Thoracic': {
                listings: [
                    { text: 'Bilateral Facet', tooltip: 'Bilateral Facet Subluxation' },
                    { text: 'Left facet', tooltip: 'Left Facet Subluxation' },
                    { text: 'Right facet', tooltip: 'Right Facet Subluxation' },
                    { text: 'Left Rib', tooltip: 'Left Rib Subluxation' },
                    { text: 'Right Rib', tooltip: 'Right Rib Subluxation' },
                    { text: 'PR', tooltip: 'Posterior Right' },
                    { text: 'PRS', tooltip: 'Posterior Right Superior' },
                    { text: 'PRI-t', tooltip: 'Posterior Right Inferior, Thoracic' },
                    { text: 'PL', tooltip: 'Posterior Left' },
                    { text: 'PLS', tooltip: 'Posterior Left Superior' },
                    { text: 'PLI-t', tooltip: 'Posterior Left Inferior, Thoracic' },
                    { text: 'Left side slip', tooltip: 'Left Lateral Subluxation' },
                    { text: 'Right side slip', tooltip: 'Right Lateral Subluxation' },
                    { text: 'Anterior', tooltip: 'Anterior' },
                    { text: 'AR', tooltip: 'Anterior Right' },
                    { text: 'ARS', tooltip: 'Anterior Right Superior' },
                    { text: 'ARI-t', tooltip: 'Anterior Right Inferior, Thoracic' },
                    { text: 'AL', tooltip: 'Anterior Left' },
                    { text: 'ALI-t', tooltip: 'Anterior Left Inferior, Thoracic' },
                    { text: 'Anterior Rib Cartilage', tooltip: 'Rib cartilage adjustment' },
                    { text: 'Left posterior Facet', tooltip: 'Left Posterior Facet Subluxation' },
                    { text: 'Right posterior Facet', tooltip: 'Right Posterior Facet Subluxation' },
                    { text: 'Bilateral posterior Facet', tooltip: 'Bilateral Posterior Facet Subluxation' }
                ],
                positions: [
                    { text: 'Prone', tooltip: 'Face-down position' },
                    { text: 'Supine', tooltip: 'Face-up position' },
                    { text: 'Standing', tooltip: 'Standing position' },
                    { text: 'Seated', tooltip: 'Sitting position' }
                ],
                contacts: [
                    { text: 'X Bilateral', tooltip: 'Cross bilateral adjustment' },
                    { text: 'Double thenar', tooltip: 'Double thenar pad contact' },
                    { text: 'Unilateral Reinforced', tooltip: 'Single-sided reinforced contact' },
                    { text: 'TVP contact', tooltip: 'Transverse Process contact' },
                    { text: 'SP contact', tooltip: 'Spinous Process contact' },
                    { text: 'Thumb Contact', tooltip: 'Thumb-based contact' },
                    { text: 'Double Finger Reinforced', tooltip: 'Double finger reinforced contact' },
                    { text: 'ABC roll', tooltip: 'Anterior Body Correction roll' },
                    { text: 'Anterior Thoracic', tooltip: 'Anterior thoracic adjustment' }
                ],
                types: [
                    { text: 'Osseous', tooltip: 'Cavitation adjustment' },
                    { text: 'Drop', tooltip: 'Drop table technique' },
                    { text: 'Finger Toggle', tooltip: 'Finger-based toggle adjustment' },
                    { text: 'Hold', tooltip: 'Sustained hold adjustment' },
                    { text: 'Dural Breath', tooltip: 'Dural tension adjustment' },
                    { text: 'Inhalation', tooltip: 'Inhalation-related adjustment' },
                    { text: 'Expiration', tooltip: 'Expiration-related adjustment' }
                ]
            },
            'Lumbar': {
                listings: [
                    { text: 'Left posterior Facet', tooltip: 'Left Posterior Facet Subluxation' },
                    { text: 'Right posterior Facet', tooltip: 'Right Posterior Facet Subluxation' },
                    { text: 'PR', tooltip: 'Posterior Right' },
                    { text: 'PRS', tooltip: 'Posterior Right Superior' },
                    { text: 'PRI-m', tooltip: 'Posterior Right Inferior, Mammillary' },
                    { text: 'PL', tooltip: 'Posterior Left' },
                    { text: 'PLS', tooltip: 'Posterior Left Superior' },
                    { text: 'PLI-m', tooltip: 'Posterior Left Inferior, Mammillary' },
                    { text: 'Anterior', tooltip: 'Anterior Subluxation' }
                ],
                positions: [
                    { text: 'Side posture', tooltip: 'Side-lying position' },
                    { text: 'Prone', tooltip: 'Face-down position' },
                    { text: 'Supine', tooltip: 'Face-up position' },
                    { text: 'Standing', tooltip: 'Standing position' }
                ],
                contacts: [
                    { text: 'SP contact', tooltip: 'Spinous Process contact' },
                    { text: 'Mammillary contact', tooltip: 'Mammillary process contact' }
                ],
                types: [
                    { text: 'Osseous', tooltip: 'Cavitation adjustment' },
                    { text: 'Push move', tooltip: 'Pushing adjustment' },
                    { text: 'Pull move', tooltip: 'Pulling adjustment' },
                    { text: 'Coupled Motion', tooltip: 'Combined motion correction' },
                    { text: 'ISU', tooltip: 'Involved Side Up' },
                    { text: 'ISD', tooltip: 'Involved Side Down' },
                    { text: 'Drop', tooltip: 'Drop table technique' },
                    { text: 'Finger Toggle', tooltip: 'Finger-based toggle adjustment' },
                    { text: 'Hold', tooltip: 'Sustained hold adjustment' },
                    { text: 'Dural Breath', tooltip: 'Dural tension adjustment' },
                    { text: 'ABC roll', tooltip: 'Anterior Body Correction roll' }
                ]
            },
            'Pelvis': {
                listings: [
                    { text: 'PI', tooltip: 'Posterior Inferior' },
                    { text: 'PIIn', tooltip: 'Posterior Inferior Internal' },
                    { text: 'PIEx', tooltip: 'Posterior Inferior External' },
                    { text: 'AS', tooltip: 'Anterior Superior' },
                    { text: 'ASIn', tooltip: 'Anterior Superior Internal' },
                    { text: 'ASEx', tooltip: 'Anterior Superior External' },
                    { text: 'Ex', tooltip: 'External Rotation' },
                    { text: 'In', tooltip: 'Internal Rotation' },
                    { text: 'Ex/In', tooltip: 'External/Internal Rotation' },
                    { text: 'In/Ex', tooltip: 'Internal/External Rotation' }
                ],
                positions: [
                    { text: 'Side posture', tooltip: 'Side-lying position' },
                    { text: 'Prone', tooltip: 'Face-down position' },
                    { text: 'Supine', tooltip: 'Face-up position' },
                    { text: 'Standing', tooltip: 'Standing position' }
                ],
                types: [
                    { text: 'Osseous', tooltip: 'Cavitation adjustment' },
                    { text: 'Drop', tooltip: 'Drop table technique' },
                    { text: 'Blocked', tooltip: 'Blocked adjustment technique' },
                    { text: 'Finger toggle', tooltip: 'Finger-based toggle adjustment' },
                    { text: 'Hold', tooltip: 'Sustained hold adjustment' },
                    { text: 'Dural Breath', tooltip: 'Dural tension adjustment' },
                    { text: 'Push move', tooltip: 'Pushing adjustment' },
                    { text: 'Pull move', tooltip: 'Pulling adjustment' },
                    { text: 'Pump', tooltip: 'Pumping adjustment' }
                ]
            },
            'Sacrum & coccyx': {
                listings: [
                    { text: 'P', tooltip: 'Posterior' },
                    { text: 'P-L', tooltip: 'Posterior Left' },
                    { text: 'P-R', tooltip: 'Posterior Right' },
                    { text: 'P-L inf', tooltip: 'Posterior Left Inferior' },
                    { text: 'P-R inf', tooltip: 'Posterior Right Inferior' },
                    { text: 'L-inf', tooltip: 'Left Inferior' },
                    { text: 'R-inf', tooltip: 'Right Inferior' },
                    { text: 'A-L', tooltip: 'Anterior Left' },
                    { text: 'A-R', tooltip: 'Anterior Right' },
                    { text: 'A-L-inf', tooltip: 'Anterior Left Inferior' },
                    { text: 'A-R-inf', tooltip: 'Anterior Right Inferior' }
                ],
                positions: [
                    { text: 'Side posture', tooltip: 'Side-lying position' },
                    { text: 'Prone', tooltip: 'Face-down position' },
                    { text: 'Supine', tooltip: 'Face-up position' }
                ],
                types: [
                    { text: 'Osseous', tooltip: 'Cavitation adjustment' },
                    { text: 'ISU', tooltip: 'Involved Side Up' },
                    { text: 'ISD', tooltip: 'Involved Side Down' },
                    { text: 'Push move', tooltip: 'Pushing adjustment' },
                    { text: 'Pull move', tooltip: 'Pulling adjustment' },
                    { text: 'Drop', tooltip: 'Drop table technique' },
                    { text: 'Finger Toggle', tooltip: 'Finger-based toggle adjustment' },
                    { text: 'Hold', tooltip: 'Sustained hold adjustment' },
                    { text: 'Dural Breath', tooltip: 'Dural tension adjustment' },
                    { text: 'Logan Basic L', tooltip: 'Logan Basic Left technique' },
                    { text: 'Logan Basic R', tooltip: 'Logan Basic Right technique' }
                ]
            },
            'Extremities': {
                listings: [
                    { text: 'LEFT', tooltip: 'Left side adjustment' },
                    { text: 'RIGHT', tooltip: 'Right side adjustment' },
                    { text: 'BILATERAL', tooltip: 'Both sides adjustment' },
                    { text: 'Distal', tooltip: 'Away from center' },
                    { text: 'Proximal', tooltip: 'Toward center' },
                    { text: 'Posterior', tooltip: 'Backward displacement' },
                    { text: 'Anterior', tooltip: 'Forward displacement' },
                    { text: 'Superior', tooltip: 'Upward displacement' },
                    { text: 'Inferior', tooltip: 'Downward displacement' },
                    { text: 'IN', tooltip: 'Internal rotation' },
                    { text: 'EX', tooltip: 'External rotation' }
                ],
                'Extremity Bone': [
                    { text: '1st', tooltip: 'First joint/segment' },
                    { text: '2nd', tooltip: 'Second joint/segment' },
                    { text: '3rd', tooltip: 'Third joint/segment' },
                    { text: '4th', tooltip: 'Fourth joint/segment' },
                    { text: '5th', tooltip: 'Fifth joint/segment' },
                    { text: 'Medial', tooltip: 'Medial contact' },
                    { text: 'Intermediate', tooltip: 'Intermediate contact' },
                    { text: 'Lateral', tooltip: 'Lateral contact' }
                ],
                types: [
                    { text: 'Osseous', tooltip: 'Cavitation adjustment' },
                    { text: 'Drop', tooltip: 'Drop table technique' },
                    { text: 'Stimulation', tooltip: 'Stimulation of joint' }
                ]
            }
        };

        const zoneTexts = {
            'Zone 1': 'zone 1 with stimulation of Co1, S1, L1, T1 and C1 with vomer release.',
            'Zone 2': 'Zone 2 with stimulation of AI sacrum, L2, T12, T3 and C2 with pterion/occipitomastoid release.',
            'Zone 3': 'Zone 3 with stimulation of ASIn, L3, T9, T4 and C3 with zygomatic release.',
            'Zone 4': 'Zone 4 with stimulation of ASEx, L4, T8, T4, C4 with the release of squamous and spheno-squamous sutures.',
            'Zone 5': 'Zone 5 with stimulation of PIIn, L5, T11, T5, C5, with the release of the squamous and spheno-squamous sutures.',
            'Zone 6': 'Zone 6 with stimulation of PIEx, L1, T10, T2 and C6 with stimulation of the frontonasal and sphenofrontal sutures.',
            'Zone 7': 'Zone 7 with stimulation inferior sacrum, L3, T8, T4, C7 and release of the bilateral lamboidal suture.'
        };

        // Function to flash button
        function flashButton(btn) {
            btn.classList.add('selected');
            setTimeout(() => {
                btn.classList.remove('selected');
            }, 500);
        }

        // Function to select category and show sub-bones
        function selectCategory(category, elem) {
            if (selectedCategory === category) {
                selectedCategory = '';
                elem.classList.remove('selected');
                document.getElementById('colBonesContent').innerHTML = '';
                resetSelections();
                return;
            }
            document.querySelectorAll('.category-selectable').forEach(el => el.classList.remove('selected'));
            elem.classList.add('selected');
            selectedCategory = category;
            const colBonesContent = document.getElementById('colBonesContent');
            colBonesContent.innerHTML = '<h4>' + category + '</h4>';
            let bones = [];
            if (category === 'Cranial Bones') bones = ['Occipital', 'Sphenoid', 'Maxilla', 'Frontal', 'Parietal', 'Temporal', 'Zygomatic', 'Ethmoid', 'Vomer', 'Mandible', 'Howat sweep'];
            if (category === 'Cervical') bones = ['Occiput', 'C1/Atlas', 'C2/Axis', 'C3', 'C4', 'C5', 'C6', 'C7'];
            if (category === 'Thoracic') bones = ['T1', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'T8', 'T9', 'T10', 'T11', 'T12'];
            if (category === 'Lumbar') bones = ['L1', 'L2', 'L3', 'L4', 'L5'];
            if (category === 'Pelvis') bones = ['Left Ilium', 'Right Ilium', 'Left Pubis', 'Right Pubis'];
            if (category === 'Sacrum & coccyx') {
                colBonesContent.innerHTML += '<details><summary>Sacrum</summary><div id="sacrum-content" class="sacrum-content"></div></details>';
                colBonesContent.innerHTML += '<details><summary>Coccyx</summary><div id="coccyx-content" class="coccyx-content"></div></details>';
                const sacrumContent = document.getElementById('sacrum-content');
                const coccyxContent = document.getElementById('coccyx-content');
                ['Sacrum', 'Sacrum S1', 'Sacrum S2', 'Sacrum S3', 'Sacrum S4', 'Sacrum S5'].forEach(bone => {
                    sacrumContent.innerHTML += '<div class="selectable sub-item bone-selectable" onclick="selectBone(\'' + category + '\', \'' + bone + '\', this)">' + bone + '</div>';
                });
                ['Coccyx Co1', 'Coccyx Co2', 'Coccyx Co3', 'Coccyx Co4'].forEach(bone => {
                    coccyxContent.innerHTML += '<div class="selectable sub-item bone-selectable" onclick="selectBone(\'' + category + '\', \'' + bone + '\', this)">' + bone + '</div>';
                });
            } else if (category === 'Extremities') {
                colBonesContent.innerHTML += '<div class="selectable sub-item" onclick="showLimbBones(\'Upper Limb\')">Upper Limb</div>';
                colBonesContent.innerHTML += '<div class="selectable sub-item" onclick="showLimbBones(\'Lower Limb\')">Lower Limb</div>';
                return;
            } else if (category === 'Zones') bones = ['Zone 1', 'Zone 2', 'Zone 3', 'Zone 4', 'Zone 5', 'Zone 6', 'Zone 7'];
            if (category !== 'Sacrum & coccyx' && category !== 'Extremities') {
                bones.forEach(bone => {
                    colBonesContent.innerHTML += '<div class="selectable sub-item bone-selectable" onclick="selectBone(\'' + category + '\', \'' + bone + '\', this)">' + bone + '</div>';
                });
            }
            document.getElementById('focusField').innerHTML = 'Select a specific bone/area.';
            document.getElementById('addToSoapButton').style.display = 'block';
        }

        function showLimbBones(limb) {
            const colBonesContent = document.getElementById('colBonesContent');
            let limbBones = [];
            if (limb === 'Lower Limb') {
                limbBones = ['Phalanx Lower', 'Metatarsal', 'Cuneiform', 'Cuboid', 'Navicular', 'Talus', 'Calcaneus', 'Fibula', 'Tibia', 'Femur Head/Condyle'];
            } else if (limb === 'Upper Limb') {
                limbBones = ['Phalanx Upper', 'Metacarpal', 'Scaphoid', 'Lunate', 'Triquetrum', 'Pisiform', 'Trapezium', 'Trapezoid', 'Capitate', 'Hamate', 'Radius', 'Ulnar', 'Humerus', 'Scapula', 'AC joint', 'SC joint', 'Manubrium', 'Sternum', 'Xiphoid process'];
            }
            limbBones.forEach(bone => {
                colBonesContent.innerHTML += '<div class="selectable sub-item bone-selectable" onclick="selectBone(\'Extremities\', \'' + bone + '\', this)">' + bone + '</div>';
            });
        }

        // Function to select bone and populate listings or handle zones
        function selectBone(category, bone, elem) {
            if (selectedBone === bone) {
                selectedBone = '';
                elem.classList.remove('selected');
                resetSelections();
                return;
            }
            document.querySelectorAll('.bone-selectable').forEach(el => el.classList.remove('selected'));
            elem.classList.add('selected');
            selectedBone = bone;
            selectedCategory = category;
            if (category === 'Zones') {
                const text = zoneTexts[bone];
                if (text) {
                    addToAction(text);
                }
                resetSelections();
                return;
            }
            if (category === 'Cranial Bones' && bone === 'Howat sweep') {
                addToAction('Cranial Palate - Howat sweep performed');
                resetSelections();
                return;
            }
            let data;
            if (category === 'Cranial Bones') {
                data = {
                    listings: listingsData['Cranial Bones'].commonListings,
                    positions: listingsData['Cranial Bones'][bone].positions || [],
                    types: listingsData['Cranial Bones'].commonTypes,
                    protocols: listingsData['Cranial Bones'].commonProtocols
                };
            } else if (category === 'Cervical') {
                let key = 'C2-7';
                if (bone === 'Occiput') key = 'Occiput';
                else if (bone === 'C1/Atlas') key = 'C1/Atlas';
                data = listingsData['Cervical'][key];
            } else if (category === 'Sacrum & coccyx' && (bone.startsWith('Sacrum') || bone.startsWith('Coccyx'))) {
                data = listingsData['Sacrum & coccyx'];
            } else {
                data = listingsData[category];
            }
            populateListings(data.listings || []);
            populatePositions(data.positions || []);
            populateContacts(data.contacts || []);
            populateTypes(data.types || []);
            populateProtocols(data.protocols || []);
            populateSot(data.SOT || []);
            document.getElementById('listingsDetails').open = true;
            document.getElementById('positionsDetails').open = false;
            document.getElementById('contactsDetails').open = false;
            document.getElementById('typesDetails').open = false;
            document.getElementById('protocolsDetails').open = false;
            document.getElementById('sotDetails').open = false;
            document.getElementById('contactsDetails').style.display = data.contacts ? 'block' : 'none';
            document.getElementById('protocolsDetails').style.display = data.protocols ? 'block' : 'none';
            document.getElementById('sotDetails').style.display = data.SOT ? 'block' : 'none';
        }

        // Populate listings
        function populateListings(options) {
            const container = document.getElementById('listingsContainer');
            container.innerHTML = '';
            options.forEach(opt => {
                const div = document.createElement('div');
                div.className = 'selectable listing-selectable';
                div.textContent = opt.text;
                div.setAttribute('data-tooltip', opt.tooltip);
                div.onclick = (e) => {
                    selectListing(opt.text, e.target);
                    document.getElementById('listingsDetails').open = false;
                    document.getElementById('positionsDetails').open = true;
                };
                container.appendChild(div);
            });
        }

        function selectListing(listing, elem) {
            if (selectedListings.includes(listing)) {
                selectedListings = [];
                elem.classList.remove('selected');
            } else {
                selectedListings = [listing];
                document.querySelectorAll('.listing-selectable').forEach(el => el.classList.remove('selected'));
                elem.classList.add('selected');
            }
        }

        // Populate positions
        function populatePositions(options) {
            const container = document.getElementById('positionsContainer');
            container.innerHTML = '';
            options.forEach(opt => {
                const div = document.createElement('div');
                div.className = 'selectable position-selectable';
                div.textContent = opt.text;
                div.setAttribute('data-tooltip', opt.tooltip);
                div.onclick = (e) => {
                    selectPosition(opt.text, e.target);
                    document.getElementById('positionsDetails').open = false;
                    document.getElementById('contactsDetails').open = document.getElementById('contactsDetails').style.display !== 'none';
                    if (!document.getElementById('contactsDetails').open) {
                        document.getElementById('typesDetails').open = true;
                    }
                };
                container.appendChild(div);
            });
        }

        function selectPosition(position, elem) {
            if (selectedPositions.includes(position)) {
                selectedPositions = [];
                elem.classList.remove('selected');
            } else {
                selectedPositions = [position];
                document.querySelectorAll('.position-selectable').forEach(el => el.classList.remove('selected'));
                elem.classList.add('selected');
            }
        }

        // Populate contacts
        function populateContacts(options) {
            const container = document.getElementById('contactsContainer');
            container.innerHTML = '';
            options.forEach(opt => {
                const div = document.createElement('div');
                div.className = 'selectable contact-selectable';
                div.textContent = opt.text;
                div.setAttribute('data-tooltip', opt.tooltip);
                div.onclick = (e) => {
                    selectContact(opt.text, e.target);
                    document.getElementById('contactsDetails').open = false;
                    document.getElementById('typesDetails').open = true;
                };
                container.appendChild(div);
            });
        }

        function selectContact(contact, elem) {
            if (selectedContacts.includes(contact)) {
                selectedContacts = [];
                elem.classList.remove('selected');
            } else {
                selectedContacts = [contact];
                document.querySelectorAll('.contact-selectable').forEach(el => el.classList.remove('selected'));
                elem.classList.add('selected');
            }
        }

        // Populate types
        function populateTypes(options) {
            const container = document.getElementById('typesContainer');
            container.innerHTML = '';
            options.forEach(opt => {
                const div = document.createElement('div');
                div.className = 'selectable type-selectable';
                div.textContent = opt.text;
                div.setAttribute('data-tooltip', opt.tooltip);
                div.onclick = (e) => selectType(opt.text, e.target);
                container.appendChild(div);
            });
            container.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    addToSoap();
                }
            });
        }

        function selectType(type, elem) {
            const index = selectedTypes.indexOf(type);
            if (index > -1) {
                selectedTypes.splice(index, 1);
                elem.classList.remove('selected');
            } else {
                selectedTypes.push(type);
                elem.classList.add('selected');
            }
        }

        // Populate protocols
        function populateProtocols(options) {
            const container = document.getElementById('protocolsContainer');
            container.innerHTML = '';
            options.forEach(opt => {
                const div = document.createElement('div');
                div.className = 'selectable protocol-selectable';
                div.textContent = opt.text;
                div.setAttribute('data-tooltip', opt.tooltip);
                div.onclick = (e) => selectProtocol(opt.text, e.target);
                container.appendChild(div);
            });
            container.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    addToSoap();
                }
            });
        }

        function selectProtocol(protocol, elem) {
            const index = selectedProtocols.indexOf(protocol);
            if (index > -1) {
                selectedProtocols.splice(index, 1);
                elem.classList.remove('selected');
            } else {
                selectedProtocols.push(protocol);
                elem.classList.add('selected');
            }
        }

        // Populate SOT
        function populateSot(options) {
            const container = document.getElementById('sotContainer');
            container.innerHTML = '';
            options.forEach(opt => {
                const div = document.createElement('div');
                div.className = 'selectable sot-selectable';
                div.textContent = opt.text;
                div.setAttribute('data-tooltip', opt.tooltip);
                div.onclick = (e) => selectSot(opt.text, e.target);
                container.appendChild(div);
            });
            container.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    addToSoap();
                }
            });
        }

        function selectSot(sot, elem) {
            const index = selectedSot.indexOf(sot);
            if (index > -1) {
                selectedSot.splice(index, 1);
                elem.classList.remove('selected');
            } else {
                selectedSot.push(sot);
                elem.classList.add('selected');
            }
        }

        // Add to SOAP (full to Action)
        function addToSoap() {
            const adjustmentEntry = `${selectedBone}: ${selectedListings.join(', ')} ${selectedPositions.join(', ')} ${selectedContacts.join(', ')} ${selectedTypes.join(', ')} ${selectedSot.join(', ')}`.trim();
            if (adjustmentEntry !== selectedBone + ':') {
                addToAction(adjustmentEntry);
            }
            if (selectedProtocols.length > 0) {
                addToAction(`cranial protocol: ${selectedProtocols.join(', ')}`);
            }
            resetSelections();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        function resetSelections() {
            selectedListings = [];
            selectedPositions = [];
            selectedContacts = [];
            selectedTypes = [];
            selectedProtocols = [];
            selectedSot = [];
            document.querySelectorAll('.listing-selectable, .position-selectable, .contact-selectable, .type-selectable, .protocol-selectable, .sot-selectable').forEach(el => el.classList.remove('selected'));
            document.getElementById('listingsContainer').innerHTML = '';
            document.getElementById('positionsContainer').innerHTML = '';
            document.getElementById('contactsContainer').innerHTML = '';
            document.getElementById('typesContainer').innerHTML = '';
            document.getElementById('protocolsContainer').innerHTML = '';
            document.getElementById('sotContainer').innerHTML = '';
            document.getElementById('listingsDetails').open = false;
            document.getElementById('positionsDetails').open = false;
            document.getElementById('contactsDetails').open = false;
            document.getElementById('typesDetails').open = false;
            document.getElementById('protocolsDetails').open = false;
            document.getElementById('sotDetails').open = false;
        }

        // Add custom to Action
        function addCustomToAction(elem) {
            const custom = document.getElementById('customActionInput').value;
            if (custom) {
                addToAction(custom);
                document.getElementById('customActionInput').value = '';
                flashButton(elem);
            }
        }

        // Set active SOAP section
        function setActiveSection(section) {
            activeTextarea = section + 'Field';
            document.querySelectorAll('.soap-section').forEach(el => el.classList.remove('active-section'));
            document.getElementById(section + 'Section').classList.add('active-section');
        }

        // Add to specific textarea at cursor
        function addTextToField(fieldId, text) {
            const textarea = document.getElementById(fieldId);
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const currentText = textarea.value;
            textarea.value = currentText.substring(0, start) + text + '\n' + currentText.substring(end);
            textarea.selectionStart = textarea.selectionEnd = start + text.length + 1;
            saveData();
            saveSnapshot();
        }

        function addToObjective(text) {
            addTextToField('objectiveField', text);
        }

        function addToAction(text) {
            addTextToField('actionField', text);
        }

        function addToPlan(text) {
            addTextToField('planField', text);
        }

        // Add from plan inputs
        function addPlanExercise(elem) {
            const val = document.getElementById('planExercise').value;
            if (val) addToPlan(`Exercise: ${val}`);
            document.getElementById('planExercise').value = '';
            flashButton(elem);
        }

        function addPlanNutrition(elem) {
            const val = document.getElementById('planNutrition').value;
            if (val) addToPlan(`Nutrition: ${val}`);
            document.getElementById('planNutrition').value = '';
            flashButton(elem);
        }

        function addPlanCheck(elem) {
            const val = document.getElementById('planCheck').value;
            if (val) addToPlan(`Check next visit: ${val}`);
            document.getElementById('planCheck').value = '';
            flashButton(elem);
        }

        // Add from objective inputs
        function addFromObjectiveInput(id, prefix, elem) {
            const val = document.getElementById(id).value;
            if (val) {
                addToObjective(prefix + val);
                document.getElementById(id).value = '';
                flashButton(elem);
            }
        }

        // Clear All
        function clearAll() {
            if (confirm('Are you sure you want to clear all data?')) {
                document.querySelectorAll('input[type="text"], textarea').forEach(el => el.value = '');
                resetSelections();
                selectedBone = '';
                selectedCategory = '';
                document.querySelectorAll('.bone-selectable').forEach(el => el.classList.remove('selected'));
                localStorage.clear();
                history = [];
                future = [];
                saveSnapshot(true);
            }
        }

        // Undo/Redo
        function saveSnapshot(isUndoRedo = false) {
            const data = getData();
            history.push(JSON.parse(JSON.stringify(data)));
            if (history.length > 20) history.shift();
            if (!isUndoRedo) future = [];
        }

        function undo() {
            if (history.length > 1) {
                const current = history.pop();
                future.push(current);
                setData(history[history.length - 1]);
            }
        }

        function redo() {
            if (future.length > 0) {
                const next = future.pop();
                history.push(next);
                setData(next);
            }
        }

        // Get/Set data
        function getData() {
            return {
                patientName: document.getElementById('patientName').value,
                subjective: document.getElementById('subjectiveField').value,
                objective: document.getElementById('objectiveField').value,
                action: document.getElementById('actionField').value,
                plan: document.getElementById('planField').value
            };
        }

        function setData(data) {
            document.getElementById('patientName').value = data.patientName || '';
            document.getElementById('subjectiveField').value = data.subjective || '';
            document.getElementById('objectiveField').value = data.objective || '';
            document.getElementById('actionField').value = data.action || '';
            document.getElementById('planField').value = data.plan || '';
        }

        // Auto-save
        function saveData() {
            localStorage.setItem('chiroData', JSON.stringify(getData()));
        }

        // Export
        function exportData() {
            const dataStr = "data:text/plain;charset=utf-8," + encodeURIComponent(JSON.stringify(getData(), null, 2));
            const a = document.createElement('a');
            a.href = dataStr;
            a.download = 'soap_notes.txt';
            a.click();
        }

        // Create combined neurological gyroscope as table
        function createCombinedNeuroGrid(parent) {
            const table = document.createElement('table');
            table.className = 'neuro-table';
            const thead = document.createElement('thead');
            const tr = document.createElement('tr');
            const thItem = document.createElement('th');
            thItem.textContent = 'Item';
            tr.appendChild(thItem);
            ['Left', 'Right', 'Bilateral'].forEach(side => {
                const th = document.createElement('th');
                th.textContent = side;
                tr.appendChild(th);
            });
            thead.appendChild(tr);
            table.appendChild(thead);
            const tbody = document.createElement('tbody');
            const items = [1, 2, 3, 4, 5, 6, 7, '2/1', '2/2', '2/3'];
            items.forEach(item => {
                const row = document.createElement('tr');
                const tdItem = document.createElement('td');
                tdItem.textContent = item;
                row.appendChild(tdItem);
                ['Left', 'Right', 'Bilateral'].forEach(side => {
                    const td = document.createElement('td');
                    const btn = document.createElement('button');
                    btn.className = 'button';
                    btn.textContent = side;
                    btn.onclick = (e) => {
                        addToObjective(`Neurological Gyroscope: ${item} ${side}`);
                        flashButton(e.target);
                    };
                    td.appendChild(btn);
                    row.appendChild(td);
                });
                tbody.appendChild(row);
            });
            table.appendChild(tbody);
            parent.appendChild(table);
        }

        // Create number selector as table
        function createNumberSelector(parent, title, items = [1, 2, 3, 4, 5, 6, 7]) {
            const table = document.createElement('table');
            table.className = 'number-selector-table';
            const caption = document.createElement('caption');
            caption.textContent = title.split(' (')[0];
            table.appendChild(caption);
            const tr = document.createElement('tr');
            items.forEach(item => {
                const td = document.createElement('td');
                const btn = document.createElement('button');
                btn.className = 'button';
                btn.textContent = item;
                btn.onclick = (e) => {
                    const shortTitle = title.split(' (')[0];
                    addToObjective(`${shortTitle}: ${item}`);
                    flashButton(e.target);
                };
                td.appendChild(btn);
                tr.appendChild(td);
            });
            table.appendChild(tr);
            parent.appendChild(table);
        }

        // Create text input section for VIP
        function createTextInputSection(parent, title) {
            const div = document.createElement('div');
            div.className = 'vip-section';
            const titleElem = document.createElement('h4');
            titleElem.textContent = title.split(' (')[0];
            div.appendChild(titleElem);
            const inputGroup = document.createElement('div');
            inputGroup.className = 'text-input-group';
            const input = document.createElement('input');
            input.type = 'text';
            input.placeholder = 'e.g. Stomach (cardiac)';
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    addVip(e.target.nextSibling);
                }
            });
            inputGroup.appendChild(input);
            const btn = document.createElement('button');
            btn.className = 'button';
            btn.textContent = 'Add';
            btn.onclick = (e) => addVip(e.target);
            inputGroup.appendChild(btn);
            div.appendChild(inputGroup);
            parent.appendChild(div);

            function addVip(addBtn) {
                const val = input.value.trim();
                if (val) {
                    const shortTitle =title.split(' (')[0];
                    addToObjective(`${shortTitle} - ${val}`);
                    input.value = '';
                    flashButton(addBtn);
                }
            }
        }

        // Generate palpatory findings content as table
        function generatePalpatoryFindingsContent() {
            const table = document.createElement('table');
            table.className = 'attractive-table';
            const groups = [
                { title: 'RCPM tight and tender', buttons: [{ text: 'Left', value: 'RCPM tight and tender Left' }, { text: 'Right', value: 'RCPM tight and tender Right' }] },
                { title: 'GSC (Gyroscopic Subluxation Complex)', buttons: [{ text: 'Left', value: 'GSC Left' }, { text: 'Right', value: 'GSC Right' }] },
                { title: 'Great Toe Extension Loss', buttons: [{ text: 'Left', value: 'Great Toe Extension Loss Left' }, { text: 'Right', value: 'Great Toe Extension Loss Right' }] },
                { title: 'Short leg', buttons: [{ text: 'Left', value: 'Short leg Left' }, { text: 'Right', value: 'Short leg Right' }] },
                { title: 'Derifield', buttons: [{ text: '-ve', value: 'Derifield -ve' }, { text: '+ve', value: 'Derifield +ve' }] },
                { title: 'Prone H2B ROM decreased', buttons: [{ text: 'Left', value: 'Prone H2B ROM decreased Left' }, { text: 'Right', value: 'Prone H2B ROM decreased Right' }] },
                { title: 'Meningeal Torque', buttons: [{ text: 'Diaschisis', value: 'Predominant Meningeal Torque Diaschisis' }, { text: 'Necrotic', value: 'Meningeal Torque Necrotic' }] }
            ];
            groups.forEach(group => {
                const tr = document.createElement('tr');
                const th = document.createElement('th');
                th.textContent = group.title;
                tr.appendChild(th);
                const td = document.createElement('td');
                const buttonGroup = document.createElement('div');
                buttonGroup.className = 'button-group';
                group.buttons.forEach(button => {
                    const btn = document.createElement('button');
                    btn.className = 'button';
                    btn.textContent = button.text;
                    btn.onclick = (e) => {
                        addToObjective(button.value);
                        flashButton(e.target);
                    };
                    buttonGroup.appendChild(btn);
                });
                td.appendChild(buttonGroup);
                tr.appendChild(td);
                table.appendChild(tr);
            });
            return table;
        }

        // Create palpatory findings header
        function createPalpatoryFindingsHeader(parent) {
            const header = document.createElement('div');
            header.className = 'section-header';
            header.textContent = 'Palpatory Findings';
            header.onclick = function() {
                const content = generatePalpatoryFindingsContent();
                openModal('Palpatory Findings', content);
            };
            parent.appendChild(header);
        }

        // System fault lines subtypes
        const faultSubtypes = [
            'Gyro', 'Zone(s) active', 'VIP',
            'IAR', 'NIR', 'EDR',
            'PR', 'MR', 'IR'
        ];

        // Generate system fault lines content as grid of buttons
        function generateSystemFaultLinesContent() {
            const content = document.createElement('div');
            content.className = 'fault-grid';
            faultSubtypes.forEach(subtype => {
                const btn = document.createElement('div');
                btn.className = 'fault-button';
                btn.textContent = subtype;
                btn.onclick = (e) => openSubModal(subtype, e.target);
                content.appendChild(btn);
            });
            return content;
        }

        // Create system fault lines header
        function createSystemFaultLinesHeader(parent) {
            const header = document.createElement('div');
            header.className = 'section-header';
            header.textContent = 'System Fault Lines';
            header.onclick = function() {
                const content = generateSystemFaultLinesContent();
                openModal('System Fault Lines', content, true); // true for system fault modal
            };
            parent.appendChild(header);
        }

        // Generate objective findings notes content as table
        function generateObjectiveFindingsNotesContent() {
            const content = document.createElement('div');
            const notes = [
                { label: 'Hypo-reactive Muscle:', id: 'hypoInput', prefix: 'Hypo-reactive Muscle: ' },
                { label: 'Hyper-reactive muscle:', id: 'hyperInput', prefix: 'Hyper-reactive muscle: ' },
                { label: 'Tight and tender:', id: 'tightInput', prefix: 'Tight and tender: ' },
                { label: 'Additional Notes:', id: 'additionalInput', prefix: 'Additional Notes: ' }
            ];
            notes.forEach(note => {
                const groupDiv = document.createElement('div');
                groupDiv.className = 'group';
                const label = document.createElement('label');
                label.innerHTML = `${note.label} <input id="${note.id}" type="text">`;
                groupDiv.appendChild(label);
                const btn = document.createElement('button');
                btn.className = 'button';
                btn.textContent = 'Add';
                btn.onclick = (e) => addFromObjectiveInput(note.id, note.prefix, e.target);
                groupDiv.appendChild(btn);
                content.appendChild(groupDiv);
            });
            return content;
        }

        // Create objective findings notes header
        function createObjectiveFindingsNotesHeader(parent) {
            const header = document.createElement('div');
            header.className = 'section-header';
            header.textContent = 'Objective Findings Notes';
            header.onclick = function() {
                const content = generateObjectiveFindingsNotesContent();
                openModal('Objective Findings Notes', content);
            };
            parent.appendChild(header);
        }

        // Create SOT header
        function createSotHeader(parent) {
            const header = document.createElement('div');
            header.className = 'section-header';
            header.textContent = 'SOT';
            header.onclick = function() {
                const content = generateSotContent();
                openModal('SOT', content);
            };
            parent.appendChild(header);
        }

        // Generate SOT content as grid of buttons
        function generateSotContent() {
            const content = document.createElement('div');
            content.className = 'fault-grid';
            const sotOptions = ['CAT 1', 'SB+ve', 'SB-ve', 'CAT 2', 'CAT 3', 'Left short Leg', 'Right short leg', 'Blocked', 'Supine', 'Prone'];
            sotOptions.forEach(option => {
                const btn = document.createElement('div');
                btn.className = 'fault-button';
                btn.textContent = option;
                btn.onclick = (e) => toggleSelection(e.target);
                content.appendChild(btn);
            });
            const addButton = document.createElement('button');
            addButton.className = 'button add-to-soap';
            addButton.textContent = 'Add to SOAP note';
            addButton.onclick = () => {
                const selected = Array.from(content.querySelectorAll('.fault-button.selected')).map(el => el.textContent);
                if (selected.length > 0) {
                    addToObjective(`SOT: ${selected.join(', ')}`);
                }
                closeCurrentModal();
            };
            content.appendChild(addButton);
            return content;
        }

        // Modal functions
        function openModal(titleText, contentElement, isSystemFault = false) {
            let modal = document.getElementById('objectiveModal');
            if (!modal) {
                modal = document.createElement('div');
                modal.id = 'objectiveModal';
                modal.className = 'modal';
                const modalContent = document.createElement('div');
                modalContent.className = 'modal-content';
                const closeSpan = document.createElement('span');
                closeSpan.className = 'close';
                closeSpan.innerHTML = '&times;';
                closeSpan.onclick = function() {
                    closeModal(modal);
                };
                modalContent.appendChild(closeSpan);
                const title = document.createElement('h3');
                title.id = 'modalTitle';
                modalContent.appendChild(title);
                const contentDiv = document.createElement('div');
                contentDiv.id = 'modalContentDiv';
                modalContent.appendChild(contentDiv);
                modal.appendChild(modalContent);
                document.body.appendChild(modal);
            }
            document.getElementById('modalTitle').textContent = titleText;
            const contentDiv = document.getElementById('modalContentDiv');
            contentDiv.innerHTML = '';
            contentDiv.appendChild(contentElement);
            modal.style.display = 'block';
            openModals.push(modal);
            if (isSystemFault) {
                modal.dataset.isSystemFault = 'true';
            }
            modal.addEventListener('click', handleModalClick);
            document.addEventListener('keydown', handleEscKey);
            return modal;
        }

        function closeModal(modal) {
            modal.style.display = 'none';
            openModals.pop();
            modal.removeEventListener('click', handleModalClick);
            if (openModals.length === 0) {
                document.removeEventListener('keydown', handleEscKey);
            }
        }

        function handleModalClick(event) {
            if (event.target.className === 'modal') {
                closeCurrentModal();
            }
        }

        function handleEscKey(event) {
            if (event.key === 'Escape') {
                closeCurrentModal();
            }
        }

        function closeCurrentModal() {
            const currentModal = openModals[openModals.length - 1];
            if (currentModal) {
                if (currentModal.className === 'sub-modal' && currentModal.dataset.subType === 'Zone(s) active') {
                    const selectedZones = Array.from(currentModal.querySelectorAll('.selection-button.selected')).map(el => el.textContent);
                    if (selectedZones.length > 1 && !currentModal.querySelector('.primary-question')) {
                        enterPrimaryMode(currentModal, selectedZones);
                        return;
                    }
                }
                // Do not add on close, only on button
                currentModal.style.display = 'none';
                openModals.pop();
            }
        }

        function enterPrimaryMode(subModal, selectedZones) {
            subModal.querySelectorAll('.selection-button:not(.selected)').forEach(el => el.classList.add('faded'));
            const questionDiv = document.createElement('div');
            questionDiv.className = 'primary-question';
            questionDiv.textContent = 'Which is the primary zone?';
            subModal.querySelector('.sub-modal-content').insertBefore(questionDiv, subModal.querySelector('.selection-grid'));
            subModal.querySelectorAll('.selection-button.selected').forEach(el => {
                el.onclick = (e) => {
                    const primary = e.target.textContent.split(' ')[1];
                    addToObjective(`Zone(s) active: ${selectedZones.join(', ')} primary zone ${primary}`);
                    closeModal(subModal);
                };
            });
        }

        function openSubModal(subType, clickedButton) {
            let subModal = document.getElementById('subModal');
            if (!subModal) {
                subModal = document.createElement('div');
                subModal.id = 'subModal';
                subModal.className = 'sub-modal';
                const subModalContent = document.createElement('div');
                subModalContent.className = 'sub-modal-content';
                const closeSpan = document.createElement('span');
                closeSpan.className = 'close';
                closeSpan.innerHTML = '&times;';
                closeSpan.onclick = function() {
                    closeCurrentModal();
                };
                subModalContent.appendChild(closeSpan);
                const title = document.createElement('h3');
                title.id = 'subModalTitle';
                subModalContent.appendChild(title);
                const selectionDiv = document.createElement('div');
                selectionDiv.id = 'selectionGrid';
                selectionDiv.className = 'selection-grid';
                subModalContent.appendChild(selectionDiv);
                subModal.appendChild(subModalContent);
                document.body.appendChild(subModal);
            }
            const subModalContent = subModal.querySelector('.sub-modal-content');
            // Clear dynamic elements
            Array.from(subModalContent.children).forEach(child => {
                if (!child.classList.contains('close') && child.id !== 'subModalTitle' && child.id !== 'selectionGrid') {
                    child.remove();
                }
            });
            const selectionGrid = document.getElementById('selectionGrid');
            selectionGrid.innerHTML = '';
            subModal.dataset.subType = subType;
            document.getElementById('subModalTitle').textContent = subType;
            let items = [];
            if (subType === 'Gyro') {
                document.getElementById('subModalTitle').textContent = 'Gyroscopic Adaptation Line';

                // Left side
                const leftSide = document.createElement('div');
                leftSide.className = 'gyro-side';
                const left1Heading = document.createElement('h4');
                left1Heading.textContent = 'Gyro Line 1 LEFT';
                leftSide.appendChild(left1Heading);
                const left1Buttons = document.createElement('div');
                left1Buttons.className = 'gyro-buttons';
                [1, 2, 3, 4, 5, 6, 7].forEach(item => {
                    const btn = document.createElement('div');
                    btn.className = 'selection-button';
                    btn.textContent = item;
                    btn.onclick = (e) => toggleSelection(e.target);
                    btn.dataset.value = `${item} Left`;
                    left1Buttons.appendChild(btn);
                });
                leftSide.appendChild(left1Buttons);

                const left2Heading = document.createElement('h4');
                left2Heading.textContent = 'Gyro Line 2 LEFT';
                leftSide.appendChild(left2Heading);
                const left2Buttons = document.createElement('div');
                left2Buttons.className = 'gyro-buttons';
                ['2/1', '2/2', '2/3'].forEach(item => {
                    const btn = document.createElement('div');
                    btn.className = 'selection-button';
                    btn.textContent = item;
                    btn.onclick = (e) => toggleSelection(e.target);
                    btn.dataset.value = `${item} Left`;
                    left2Buttons.appendChild(btn);
                });
                leftSide.appendChild(left2Buttons);

                // Right side
                const rightSide = document.createElement('div');
                rightSide.className = 'gyro-side';
                const right1Heading = document.createElement('h4');
                right1Heading.textContent = 'Gyro Line 1 RIGHT';
                rightSide.appendChild(right1Heading);
                const right1Buttons = document.createElement('div');
                right1Buttons.className = 'gyro-buttons';
                [1, 2, 3, 4, 5, 6, 7].forEach(item => {
                    const btn = document.createElement('div');
                    btn.className = 'selection-button';
                    btn.textContent = item;
                    btn.onclick = (e) => toggleSelection(e.target);
                    btn.dataset.value = `${item} Right`;
                    right1Buttons.appendChild(btn);
                });
                rightSide.appendChild(right1Buttons);

                const right2Heading = document.createElement('h4');
                right2Heading.textContent = 'Gyro Line 2 RIGHT';
                rightSide.appendChild(right2Heading);
                const right2Buttons = document.createElement('div');
                right2Buttons.className = 'gyro-buttons';
                ['2/1', '2/2', '2/3'].forEach(item => {
                    const btn = document.createElement('div');
                    btn.className = 'selection-button';
                    btn.textContent = item;
                    btn.onclick = (e) => toggleSelection(e.target);
                    btn.dataset.value = `${item} Right`;
                    right2Buttons.appendChild(btn);
                });
                rightSide.appendChild(right2Buttons);

                // Add to grid
                const lineRow = document.createElement('div');
                lineRow.className = 'gyro-line-row';
                lineRow.appendChild(leftSide);
                lineRow.appendChild(rightSide);
                selectionGrid.appendChild(lineRow);
            } else if (subType === 'VIP') {
                selectionGrid.className = '';
                selectionGrid.style.display = 'block';
                const vipStructure = {
                    'Glandular system': {
                        'Adrenal glands': null,
                        'Pancreas': null,
                        'Liver': null,
                        'Parathyroid glands': null,
                        'Thyroid Gland': null
                    },
                    'Brain/CSF': null,
                    'Respiratory system': {
                        'Upper lung': null,
                        'Lower Lung': null
                    },
                    'Head and neck': {
                        'Inner Ear': null,
                        'Nose': null,
                        'Tongue': null,
                        'Larynx': null,
                        'Pharynx': null,
                        'Tonsils': null
                    },
                    'Digestive system': {
                        'Oesophagus': null,
                        'Stomach': {
                            'Cardiac Valve': null,
                            'Body': null,
                            'Pyloric Valve': null
                        },
                        'Pancreas': null,
                        'Gallbladder': null,
                        'Small intestine': {
                            'Duodenum': null,
                            'Jejunum': null,
                            'Ileum': null
                        },
                        'Large intestine': {
                            'ICV': null,
                            'Appendix': null,
                            'Ascending colon': null,
                            'Transverse colon': null,
                            'Hepatic Flexure': null,
                            'Splenic flexure': null,
                            'Descending colon': null,
                            'Sigmoid colon': null,
                            'Rectum': null
                        }
                    },
                    'Reproductive system': {
                        'Prostate': null,
                        'Testes': null,
                        'Penis': null,
                        'Uterus': null,
                        'Womb': null,
                        'Vagina': null
                    },
                    'Heart': null,
                    'Urinary system': {
                        'Kidneys': null,
                        'Ureters': null,
                        'Urethra': null,
                        'Bladder': null
                    },
                    'Immune system': {
                        'Spleen': null,
                        'Thymus gland': null,
                        'Right Lymphatic duct': null,
                        'Left Lymphatic duct (Thoracic Duct)': null,
                        'Appendix': null
                    }
                };
                function buildVipTree(parent, structure) {
                    for (let key in structure) {
                        if (structure[key] === null) {
                            const btn = document.createElement('div');
                            btn.className = 'selection-button';
                            btn.textContent = key;
                            btn.onclick = (e) => toggleSelection(e.target);
                            parent.appendChild(btn);
                        } else {
                            const details = document.createElement('details');
                            const summary = document.createElement('summary');
                            summary.textContent = key;
                            details.appendChild(summary);
                            const content = document.createElement('div');
                            content.className = 'sacrum-content';
                            buildVipTree(content, structure[key]);
                            details.appendChild(content);
                            parent.appendChild(details);
                        }
                    }
                }
                buildVipTree(selectionGrid, vipStructure);
                const customInput = document.createElement('input');
                customInput.className = 'custom-input';
                customInput.type = 'text';
                customInput.placeholder = 'Add custom VIP...';
                customInput.onkeypress = (e) => {
                    if (e.key === 'Enter') {
                        const val = e.target.value.trim();
                        if (val) {
                            addToObjective(`VIP - ${val}`);
                            e.target.value = '';
                        }
                    }
                };
                subModalContent.appendChild(customInput);
            } else if (subType === 'Zone(s) active') {
                items = [1, 2, 3, 4, 5, 6, 7];
                items.forEach(item => {
                    const btn = document.createElement('div');
                    btn.className = 'selection-button';
                    btn.textContent = `Zone ${item}`;
                    btn.onclick = (e) => toggleSelection(e.target);
                    selectionGrid.appendChild(btn);
                });
            } else {
                items = [1, 2, 3, 4, 5, 6, 7];
                items.forEach(item => {
                    const btn = document.createElement('div');
                    btn.className = 'selection-button';
                    btn.textContent = item;
                    btn.onclick = (e) => toggleSelection(e.target);
                    selectionGrid.appendChild(btn);
                });
            }
            // Add 'Add to SOAP note' button
            const addButton = document.createElement('button');
            addButton.className = 'button add-to-soap';
            addButton.textContent = 'Add to SOAP note';
            addButton.onclick = () => {
                addSelectionsFromSubModal(subModal);
                closeCurrentModal();
            };
            subModalContent.appendChild(addButton);
            subModal.style.display = 'block';
            openModals.push(subModal);
            subModal.addEventListener('click', handleModalClick);
            document.addEventListener('keydown', handleEscKey);
            return subModal;
        }

        function toggleSelection(elem) {
            elem.classList.toggle('selected');
        }

        function filterOrgans(query, grid) {
            const lowerQuery = query.toLowerCase();
            Array.from(grid.children).forEach(child => {
                if (child.textContent.toLowerCase().includes(lowerQuery)) {
                    child.style.display = '';
                } else {
                    child.style.display = 'none';
                }
            });
        }

        function addSelectionsFromSubModal(subModal) {
            const subType = subModal.dataset.subType;
            let selected = Array.from(subModal.querySelectorAll('.selection-button.selected')).map(el => el.dataset.value || el.textContent);
            if (selected.length > 0) {
                if (subType === 'Gyro') {
                    const leftSelected = new Set();
                    const rightSelected = new Set();
                    selected.forEach(sel => {
                        const [item, side] = sel.split(' ');
                        if (side === 'Left') leftSelected.add(item);
                        if (side === 'Right') rightSelected.add(item);
                    });
                    const bilateral = [];
                    const individual = [];
                    leftSelected.forEach(item => {
                        if (rightSelected.has(item)) {
                            bilateral.push(item);
                            rightSelected.delete(item);
                        } else {
                            individual.push(`${item} Left`);
                        }
                    });
                    rightSelected.forEach(item => {
                        individual.push(`${item} Right`);
                    });
                    bilateral.forEach(item => addToObjective(`Gyro: Bilateral ${item}`));
                    individual.forEach(sel => addToObjective(`Gyro: ${sel}`));
                } else if (subType === 'VIP') {
                    addToObjective(`VIP - ${selected.join(', ')}`);
                } else if (subType === 'Zone(s) active') {
                    addToObjective(`Zone(s) active: ${selected.join(', ')}`);
                } else {
                    addToObjective(`${subType}: ${selected.join(', ')}`);
                }
            }
        }

        // On load
        window.onload = function () {
            const savedData = localStorage.getItem('chiroData');
            if (savedData) {
                setData(JSON.parse(savedData));
            }
            document.querySelectorAll('textarea, input[type="text"]').forEach(el => {
                el.addEventListener('input', () => {
                    saveData();
                    saveSnapshot();
                });
            });
            saveSnapshot(true);
            document.getElementById('addToSoapButton').style.display = 'block';
            document.getElementById('status').innerText = 'Ready. Data auto-saves.';

            // Generate sections headers
            const objectiveCol = document.getElementById('objectiveContent');
            createPalpatoryFindingsHeader(objectiveCol);
            createSystemFaultLinesHeader(objectiveCol);
            createObjectiveFindingsNotesHeader(objectiveCol);
            createSotHeader(objectiveCol);
        };
    </script>
</head>
<body>
    <div class="top-buttons">
        <button class="button" onclick="undo()">Undo</button>
        <button class="button" onclick="redo()">Redo</button>
        <button class="button" onclick="clearAll()">Clear All</button>
        <button class="button" onclick="exportData()">Save & Export Data</button>
    </div>

    <h1>Interactive Chiropractic Listing Template</h1>

    <div class="section">
        Patient Name: <input type="text" id="patientName">
    </div>

    <div class="column-container">
        <div class="col col-objective">
            <h3>Objective Findings</h3>
            <div id="objectiveContent"></div>
        </div>
        <div class="col col-bones">
            <h3>Select Area / Category</h3>
            <div class="selectable category-selectable" onclick="selectCategory('Cranial Bones', this)">Cranial Bones</div>
            <div class="selectable category-selectable" onclick="selectCategory('Cervical', this)">Cervical</div>
            <div class="selectable category-selectable" onclick="selectCategory('Thoracic', this)">Thoracic</div>
            <div class="selectable category-selectable" onclick="selectCategory('Lumbar', this)">Lumbar</div>
            <div class="selectable category-selectable" onclick="selectCategory('Pelvis', this)">Pelvis</div>
            <div class="selectable category-selectable" onclick="selectCategory('Sacrum & coccyx', this)">Sacrum & coccyx</div>
            <div class="selectable category-selectable" onclick="selectCategory('Extremities', this)">Extremities</div>
            <div class="selectable category-selectable" onclick="selectCategory('Zones', this)">Zones</div>
            <div id="colBonesContent"></div>
        </div>
        <div class="col col-listings">
            <h3>Listings & Adjustments</h3>
            <div id="focusField">Select area/focus field first.</div>
            <details id="listingsDetails" class="listings-section">
                <summary>Listings</summary>
                <div id="listingsContainer"></div>
            </details>
            <details id="positionsDetails" class="positions-section">
                <summary>Patient position</summary>
                <div id="positionsContainer"></div>
            </details>
            <details id="contactsDetails" class="contacts-section" style="display: none;">
                <summary>Contact</summary>
                <div id="contactsContainer"></div>
            </details>
            <details id="typesDetails" class="types-section">
                <summary>Type of adjustment</summary>
                <div id="typesContainer"></div>
            </details>
            <details id="protocolsDetails" class="protocols-section" style="display: none;">
                <summary>Cranial protocols</summary>
                <div id="protocolsContainer"></div>
            </details>
            <details id="sotDetails" class="sot-section" style="display: none;">
                <summary>SOT</summary>
                <div id="sotContainer"></div>
            </details>
            <button id="addToSoapButton" class="button" onclick="addToSoap()" style="display: none;">Add to SOAP</button>
            <div>
                <label>Custom Action: <input id="customActionInput" type="text"></label>
                <button class="button" onclick="addCustomToAction(this);">Add to Action</button>
            </div>
        </div>
        <div class="col col-soap">
            <h3>SOAP Notes</h3>
            <div id="subjectiveSection" class="soap-section">
                <h4 class="soap-header" onclick="setActiveSection('subjective')">SUBJECTIVE</h4>
                <textarea id="subjectiveField"></textarea>
            </div>
            <div id="objectiveSection" class="soap-section">
                <h4 class="soap-header" onclick="setActiveSection('objective')">OBJECTIVE FINDINGS</h4>
                <textarea id="objectiveField"></textarea>
            </div>
            <div id="actionSection" class="soap-section">
                <h4 class="soap-header" onclick="setActiveSection('action')">ACTION</h4>
                <textarea id="actionField"></textarea>
            </div>
            <div id="planSection" class="soap-section">
                <h4 class="soap-header" onclick="setActiveSection('plan')">PLAN</h4>
                <textarea id="planField"></textarea>
                <div>
                    <label>Exercise: <input id="planExercise" type="text"></label>
                    <button class="button" onclick="addPlanExercise(this);">Add</button>
                </div>
                <div>
                    <label>Nutrition: <input id="planNutrition" type="text"></label>
                    <button class="button" onclick="addPlanNutrition(this);">Add</button>
                </div>
                <div>
                    <label>Check next visit: <input id="planCheck" type="text"></label>
                    <button class="button" onclick="addPlanCheck(this);">Add</button>
                </div>
            </div>
            <p id="status">(Click a SOAP header to set it as active; new entries insert at the cursor position.)</p>
        </div>
    </div>




<!-- Column 4 Integration block removed as requested -->



</body>
</html>